#!groovy

def GUID="2043"

podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      def devTag  = "${version}-" + currentBuild.number
      def prodTag = "${version}"

The public route for Nexus is http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com
The Service for the Nexus Container Registry is https://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000.
The public route for the Nexus Container Registry is https://nexus-registry-gpte-hw-cicd.apps.na311.openshift.opentlc.com

      def nexusUrl = "http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases/${GUID}"

      def nexusRegistryUrl = "http://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/repository/releases/${GUID}"
      //def nexusRegistryUrl = "https://nexus-registry-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases/${GUID}"

      def sonarUrl = "http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000"
      //def sonarUrl = "http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        sh "${mvnCmd} -DskipTests clean package"
      }

      //stage("Run tests in parallel") {
        //parallel {
          // Using Maven run the unit tests
          stage('Unit Tests') {
            echo "Running Unit Tests"

            sh "${mvnCmd} test"
          }

          // Using Maven to call SonarQube for Code Analysis
          stage('Code Analysis') {
            echo "Running Code Analysis"

            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarUrl}"
          }
        //}
      //}

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusUrl}"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        script {
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              openshift.startBuild('tasks', "--from-file=${nexusUrl}/org/jboss/quickstarts/eap/tasks/${prodTag}/tasks-${prodTag}.war", "--wait=true")

              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        echo "Copy image to Nexus container registry"

        // TBD: Copy image to Nexus container registry

        // TBD: Tag the built image with the production tag.
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        // TBD: Execute switch
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
