#!groovy

def GUID="2043"

podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node("skopeo-pod") {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage("Checkout Source") {
      checkout scm
    }

    // Build the Tasks Service
    dir("openshift-tasks") {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      def devTag  = "${version}-" + currentBuild.number
      def prodTag = "${version}"

      def devProject = "${GUID}-tasks-dev"
      def prodProject = "${GUID}-tasks-prod"

      def sonarUrl = "http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000"
      def nexusUrl = "http://nexus3.gpte-hw-cicd.svc.cluster.local:8081"
      def nexusRegistryUrl = "nexus-registry.gpte-hw-cicd.svc.cluster.local:5000"
      def openshiftRegistryUrl = "docker-registry.default.svc:5000"

      // Using Maven build the war file
      // Do not run tests in this step
      stage("Build war") {
        echo "Building version ${devTag}"

        sh "${mvnCmd} -DskipTests package"
        //sh "${mvnCmd} -DskipTests clean package"
      }

      //stage("Run tests in parallel") {
        //parallel {
          // Using Maven run the unit tests
          stage("Unit Tests") {
            echo "Running Unit Tests"

            sh "${mvnCmd} test"
          }

          // Using Maven to call SonarQube for Code Analysis
          stage("Code Analysis") {
            echo "Running Code Analysis"

            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${sonarUrl}"
          }
        //}
      //}

      // Publish the built war file to Nexus
      stage("Publish to Nexus") {
        echo "Publish to Nexus"

        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${nexusUrl}/repository/releases/${GUID}"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage("Build and Tag OpenShift Image") {
        echo "Building OpenShift container image tasks:${devTag}"

        script {
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              openshift.startBuild("tasks", "--from-file=${nexusUrl}/repository/releases/${GUID}/org/jboss/quickstarts/eap/tasks/${prodTag}/tasks-${prodTag}.war", "--wait=true")

              openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage("Deploy to Dev") {
        echo "Deploying container image to Development Project"

        script {
          // Update the Image on the Development Deployment Config
          openshift.withCluster() {
            openshift.withProject("${devProject}") {
              openshift.set("image", "dc/tasks", "tasks=${openshiftRegistryUrl}/${devProject}/tasks:${devTag}")

              openshift.set("env", "dc/tasks", "VERSION='${devTag} (tasks-dev)'")

              openshift.selector("dc", "tasks").rollout().latest();

              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }
            }
          }
        }
      }

      // Copy Image to Nexus container registry
      stage("Copy Image to Nexus container registry") {
        echo "Copy image to Nexus container registry"

        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds=admin:redhat docker://${openshiftRegistryUrl}/${devProject}/tasks:${devTag} docker://${nexusRegistryUrl}/${GUID}/tasks:${devTag}"

        script {
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                    openshift.tag("tasks:${devTag}", "/tasks:${prodTag}")
                }
            }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage("Blue/Green Production Deployment") {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding

        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name
              
              if (activeApp == "tasks-blue") {
                destApp = "tasks-green"
              }
              else {
                destApp = "tasks-blue"
              }
          
              echo "Active: " + activeApp
              echo "Target: " + destApp
              
              openshift.set("image", "dc/${destApp}", "tasks=${openshiftRegistryUrl}/${devProject}/tasks:${prodTag}")

              openshift.set("env", "dc/${destApp}", "VERSION='${prodTag} ${destApp}'")
              
              openshift.selector("dc", "${destApp}").rollout().latest();
              
              def dc_prod = openshift.selector("dc", "${destApp}").object()
              def dc_version = dc_prod.status.latestVersion
              def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()

              echo "Waiting for ${destApp} to be ready"

              while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                sleep 5
                rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
              }
            }
          }
        }
      }

      stage("Switch over to new Version") {
        echo "Switching Production application to ${destApp}."

        script {
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              def route = openshift.selector("route/tasks").object()
              route.spec.to.name="${destApp}"
              openshift.apply(route)
            }
          }
        }
      }
    }
  }
}

// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
